package boundary;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.Optional;

import control.BookController;
import entity.Book;
import entity.ConstantsAndGlobalVars;
import entity.MyFile;
import enums.BookType;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonBar.ButtonData;
import javafx.scene.control.ButtonType;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.image.ImageView;
import javafx.scene.paint.Color;
import javafx.stage.FileChooser;
import javafx.stage.Stage;

/**
 * <h1><b>AddBookController</b></h1> This is the GUI controller responsible for
 * adding books to the inventory - part of the inventory management
 * functionality.
 */
public class AddBookController {
	/**
	 * instance variables: bookController - an instance of BookController, to use
	 * when adding the book to the DB.
	 */
	private BookController bookController;
	private final String addNewCategoryBtnTitle = "Add New Category";
	private final String cancelBtnTitle = "Cancel";
	@FXML
	private TextField catalogNumberTF;

	@FXML
	private TextField titleTF;

	@FXML
	private TextField authorNameTF;

	@FXML
	private TextField publicationTF;

	@FXML
	private TextField numberOfCopiesTF;

	@FXML
	private DatePicker purchaseDateDP;

	@FXML
	private TextField shelfNumberTF;

	@FXML
	private TextField sideTF;

	@FXML
	private TextArea descriptionTA;

	@FXML
	private ComboBox typeCB;
	private ObservableList<String> bookTypesList;

	@FXML
	private TextField tableOfContentsPathTF;

	@FXML
	private Button addBookBtn;

	@FXML
	private Button cancelBtn;

	@FXML
	private Button browseFileBtn;

	@FXML
	private ImageView oblImg;

	@FXML
	private Label resultLabel;

	@FXML
	private ComboBox<String> categoriesComboBox;
	private ObservableList<String> categoryList;

	@FXML
	private Button addCategoryBtn;

	@FXML
	private TextField newCategoryTF;

	@FXML
	private Button addNewCategoryBtn;

	@FXML
	private Button show_hide_newCategoryPromptBtn;

	@FXML
	private TextArea categoriesTA;

	/**
	 * This method handles the event where the user chose a category from the
	 * comboBox and clicked add. <br>
	 * </br>
	 * When the user clicks add, it checks if the selection is valid (i.e. the
	 * prompt text is not displayed anymore), it adds the category name to the
	 * textArea below (separated by ',') if it's valid, then removes it from the
	 * list. Otherwise, it displays an Alert.
	 * 
	 * @param event auto-generated by SceneBuilder.
	 */
	@FXML
	void addCategoryHandler(ActionEvent event) {
		try {
			String category = categoriesComboBox.getSelectionModel().getSelectedItem();
			if (category == null)
				throw new ArrayIndexOutOfBoundsException();
			categoryList.remove(category);
			categoriesComboBox.setItems(categoryList);
			categoriesTA.setText(categoriesTA.getText() + category + ",");
		} catch (ArrayIndexOutOfBoundsException e) {
			Alert alert = new Alert(AlertType.ERROR);
			alert.setTitle("Whoa!");
			alert.setHeaderText("Please choose an  item from the list");
			ButtonType buttonTypeCancel = new ButtonType("Ok", ButtonData.CANCEL_CLOSE);
			alert.getButtonTypes().setAll(buttonTypeCancel);
			alert.showAndWait();
		}
	}

	/**
	 * This method handles the event where the user typed a new category from the
	 * respective TextField and clicked add. <br>
	 * </br>
	 * When the user clicks add, it checks if the input is valid (i.e. the text
	 * field is not empty), it adds the category name to the textArea below
	 * (separated by ',') if it's valid. Otherwise, it displays an Alert.
	 * 
	 * @param event auto-generated by SceneBuilder.
	 */
	@FXML
	void addNewCategoryHandler(ActionEvent event) {
		if (!newCategoryTF.getText().isEmpty())
			categoriesTA.setText(categoriesTA.getText() + newCategoryTF.getText() + ",");
		else {
			Alert alert = new Alert(AlertType.ERROR);
			alert.setTitle("Whoa!");
			alert.setHeaderText("At least type something...");
			ButtonType buttonTypeCancel = new ButtonType("Ok", ButtonData.CANCEL_CLOSE);
			alert.getButtonTypes().setAll(buttonTypeCancel);
			alert.showAndWait();
		}

	}

	/**
	 * This method handles the event where the user wants to add a new category,
	 * i.e. clicked "add new category" Button. <br>
	 * </br>
	 * It shows/hides GUI elements depending on the title of the button clicked
	 * ("cancel" hides them).
	 * 
	 * @param event auto-generated by SceneBuilder.
	 */
	@FXML
	void show_hide_newCategoryPromptHandler(ActionEvent event) {
		if (show_hide_newCategoryPromptBtn.getText().equals(addNewCategoryBtnTitle)) {
			newCategoryTF.setVisible(true);
			addNewCategoryBtn.setVisible(true);
			show_hide_newCategoryPromptBtn.setText(cancelBtnTitle);
		} else {
			newCategoryTF.setVisible(false);
			addNewCategoryBtn.setVisible(false);
			show_hide_newCategoryPromptBtn.setText(addNewCategoryBtnTitle);
		}
	}

	/**
	 * This method opens a file chooser so the user can choose a table of contents
	 * file, it filters files in the file system of the users' computer to display
	 * only PDF files.
	 * 
	 * @param event auto-generated by SceneBuilder.
	 */
	@FXML
	void BrowseTableOfContentsFileHandler(ActionEvent event) {
		tableOfContentsPathTF.setStyle("-fx-border-color: transparent; -fx-text-fill: black;");
		tableOfContentsPathTF.setText("");
		tableOfContentsPathTF.setPromptText("Choose file path");
		Stage stage = (Stage) browseFileBtn.getScene().getWindow();
		FileChooser fc = new FileChooser();
		fc.setTitle("Open PDF file...");
		fc.getExtensionFilters().add(new FileChooser.ExtensionFilter("PDF Files", "*.pdf"));
		File file = fc.showOpenDialog(stage.getOwner());
		if (file != null) {
			String filename = file.getAbsolutePath();
			tableOfContentsPathTF.setText(filename);
		}
	}

	/**
	 * This method handles the event where the user clicks "add" button, it checks
	 * if all input is valid, then calls the
	 * {@link control.BookController#addBook(Book)} method from the
	 * {@link control.BookController} class.
	 * 
	 * @param event auto-generated by SceneBuilder.
	 */
	@FXML
	void addBookHandler(ActionEvent event) {
		boolean isOk = true;
		if (catalogNumberTF.getText().isEmpty())
			isOk = false;
		if (titleTF.getText().isEmpty())
			isOk = false;
		if (authorNameTF.getText().isEmpty())
			isOk = false;
		if (publicationTF.getText().isEmpty())
			isOk = false;
		if (purchaseDateDP.getValue() == null)
			isOk = false;
		if (shelfNumberTF.getText().isEmpty())
			isOk = false;
		if (sideTF.getText().isEmpty())
			isOk = false;
		if (descriptionTA.getText().isEmpty())
			isOk = false;
		if (tableOfContentsPathTF.getText().isEmpty())
			isOk = false;
		try {
			enums.BookType.valueOf(bookTypesList.get(typeCB.getSelectionModel().getSelectedIndex()));
		} catch (ArrayIndexOutOfBoundsException e) {
			isOk = false;
		}
		if (!isOk) {
			Alert alert = new Alert(AlertType.ERROR);
			alert.setTitle("OOPS!");
			alert.setHeaderText("One or more of the fields is empty.");
			ButtonType buttonTypeCancel = new ButtonType("Ok", ButtonData.CANCEL_CLOSE);
			alert.getButtonTypes().setAll(buttonTypeCancel);
			alert.showAndWait();
			return;
		}
		/*
		 * validate that each element is not empty.
		 */
		try {
			String catalogNumber = catalogNumberTF.getText();
			String title = titleTF.getText();
			String author = authorNameTF.getText();
			String publication = publicationTF.getText();
			int numberOfCopies = Integer.parseInt(numberOfCopiesTF.getText());
			String locationOnShelf = shelfNumberTF.getText() + sideTF.getText();
			String description = descriptionTA.getText();
			enums.BookType booktype = enums.BookType
					.valueOf(bookTypesList.get(typeCB.getSelectionModel().getSelectedIndex()));
			String filePath = tableOfContentsPathTF.getText();

			File newFile = new File(filePath);// open the file
			// convert the file to a MyFile object so it can be sent to the server.
			// i.e. set the byte array, set the size, the name, etc.
			MyFile fileToUpload = new MyFile(newFile.getName());// instantiate a new MyFile object with the files' name
			// Initialise the byte array
			fileToUpload.initArray((int) newFile.length());
			// set the file size attribute
			fileToUpload.setSize((int) newFile.length());
			fileToUpload.setDescription(title + "Table of contents");
			// a temp byte array
			byte[] mybytearray = new byte[(int) newFile.length()];
			// copy the byte array from newFile to fileToUpload byte array.
			FileInputStream fis = new FileInputStream(newFile);
			BufferedInputStream bis = new BufferedInputStream(fis);
			bis.read(fileToUpload.getMybytearray(), 0, mybytearray.length);
			// close the streams so the file won't be in use.
			bis.close();
			fis.close();
			LocalDate purchaseDate_ld = purchaseDateDP.getValue();
			SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
			Date purchaseDate = Date.from(purchaseDate_ld.atStartOfDay(ZoneId.systemDefault()).toInstant());
			format.format(purchaseDate);
			Book book = new Book(catalogNumber, title, author, publication, numberOfCopies, purchaseDate,
					locationOnShelf, fileToUpload, description, booktype);
			String[] categoryArr = categoriesTA.getText().split(",");
			ArrayList<String> categoriesForBook = new ArrayList<>();
			categoriesForBook.addAll(Arrays.asList(categoryArr));
			book.setCategories(categoriesForBook);
			if (bookController.addBook(book)) {
				Alert alert = new Alert(AlertType.CONFIRMATION);
				alert.setTitle("Success!");
				alert.setHeaderText("Book Added Successfully");
				alert.setContentText("Do you want to add book copies?");
				ButtonType buttonTypeOk = new ButtonType("Yes", ButtonData.OK_DONE);
				ButtonType buttonTypeCancel = new ButtonType("No", ButtonData.CANCEL_CLOSE);
				alert.getButtonTypes().setAll(buttonTypeOk, buttonTypeCancel);
				Optional<ButtonType> result = alert.showAndWait();
				if (result.get() == buttonTypeOk) {
					Stage primaryStage = (Stage) addBookBtn.getScene().getWindow();
					FXMLLoader loader = new FXMLLoader();
					Parent root = loader.load(getClass().getResource("/boundary/AddBookCopyGUI.fxml").openStream());
					primaryStage.setScene(new Scene(root));
					primaryStage.setTitle("Add book copy");
					AddBookCopyController abc = loader.getController();
					abc.loadCN(catalogNumber);
					primaryStage.show();
				} else {
					Stage primaryStage = (Stage) cancelBtn.getScene().getWindow();
					FXMLLoader loader = new FXMLLoader();
					Parent root = loader
							.load(getClass().getResource("/boundary/InventoryManagementGUI.fxml").openStream());
					primaryStage.setScene(new Scene(root));
					primaryStage.setTitle("Inventory Management");
					primaryStage.show();
				}
			} else {
				Alert alert = new Alert(AlertType.ERROR);
				alert.setTitle("Failure!");
				alert.setHeaderText("Book already exists");
				ButtonType buttonTypeCancel = new ButtonType("Ok", ButtonData.CANCEL_CLOSE);
				alert.getButtonTypes().setAll(buttonTypeCancel);
				alert.showAndWait();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}catch(NumberFormatException n) {
			Alert alert = new Alert(AlertType.ERROR);
			alert.setTitle("Failure!");
			alert.setHeaderText("Please enter numbers only in number of copies field..");
			ButtonType buttonTypeCancel = new ButtonType("Ok", ButtonData.CANCEL_CLOSE);
			alert.getButtonTypes().setAll(buttonTypeCancel);
			alert.showAndWait();
		}
	}

	/**
	 * This method closes the current window and goes back to the previous window.
	 * 
	 * @param event auto-generated by SceneBuilder.
	 * @throws IOException thrown if an error occurs when opening the FXML file.
	 */
	@FXML
	void cancelHandler(ActionEvent event) throws IOException {
		Stage primaryStage = (Stage) cancelBtn.getScene().getWindow();
		FXMLLoader loader = new FXMLLoader();
		Parent root = loader.load(getClass().getResource("/boundary/InventoryManagementGUI.fxml").openStream());
		primaryStage.setScene(new Scene(root));
		primaryStage.setTitle("Inventory Management");
		primaryStage.show();
	}

	/**
	 * This method is called when the FXML file is loaded, it initialises the
	 * variables and some GUI elements.
	 */
	@FXML
	void initialize() {
		bookController = BookController.getInstance(ConstantsAndGlobalVars.ipAddress,
				ConstantsAndGlobalVars.DEFAULT_PORT);
		fillComboBox();
		newCategoryTF.setVisible(false);
		addNewCategoryBtn.setVisible(false);
		tableOfContentsPathTF.setEditable(false);
		/*
		 * Create constraints on TextFields and other elements.
		 */
		// catalogNumberTF.textProperty().addListener((observable, oldValue, newValue)
		// -> catalogNumberTFHandler());
	}

	/**
	 * This {@code private} method is called upon initialisation, it fills the
	 * comboBoxes with their respective values.
	 */
	private void fillComboBox() {
		ArrayList<String> arr = new ArrayList<>();
		for (BookType b : enums.BookType.values())
			arr.add(b.name());
		bookTypesList = FXCollections.observableArrayList(arr);
		typeCB.setItems(bookTypesList);
		typeCB.getSelectionModel().select(1);
		ArrayList<String> categories = bookController.getAllCategories();
		categoryList = FXCollections.observableList(categories);
		categoriesComboBox.setItems(categoryList);
		categoriesComboBox.setPromptText("Choose an existing category");
	}

//	private void catalogNumberTFHandler() {
//		/*int length = catalogNumberTF.getText().length();
//		if (length > 0) {
//			char c = catalogNumberTF.getText().charAt(length - 1);
//			if (!((c > 'A' && c < 'Z') || (c > 'a' && c < 'z')) || !(c > '0' && c < '9')) {
//				catalogNumberTF.deleteNextChar();
//				length -= 1;
//			} else {
//				if (c > 'a' && c < 'z')
//					c = Character.toUpperCase(c);
//			}
//			if (length == 15) {
//				catalogNumberTF.deleteNextChar();
//				length -= 1;
//			}
//		}*/
//		int length = catalogNumberTF.getText().length();
//		if (length > 0) {
//			//drawField(catalogNumberTF, "black","transparent");
//			catalogNumberTF.setPromptText("Fill in first name");
//			char c = catalogNumberTF.getText().charAt(length - 1);
//			if (c == ' ' || !((c > 'A' && c < 'Z') || (c > 'a' && c < 'z')) || !(c > '0' && c < '9')) {
//				catalogNumberTF.deleteNextChar();
//				length = catalogNumberTF.getText().length();
//			}else if (length > 0) {
//				String text = catalogNumberTF.getText();
//				text = text.toUpperCase();
//				//StringBuilder sb = new StringBuilder(text);
//				//sb.setCharAt(0, Character.toUpperCase(sb.charAt(0)));
//				//text = sb.toString();
//				catalogNumberTF.setText(text);
//			}
//			if(length > 15) {
//				catalogNumberTF.deleteNextChar();
//			}
//		}
//
//	}

}
