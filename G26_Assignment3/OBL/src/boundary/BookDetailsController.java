package boundary;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;

import control.BookCopyController;
import control.ClientMain;
import entity.Book;
import entity.ConstantsAndGlobalVars;
import javafx.application.HostServices;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.stage.DirectoryChooser;
import javafx.stage.Stage;
/**
 * <h1><b>BookDetailsController</b></h1>
 * This is the GUI controller responsible displaying book details to the user.
 */
public class BookDetailsController {
	/**
	 * instance variables: 
	 * bookCopyController - an instance of BookCopyController to get number of available copies.
	 * All GUI elements are {@code protected} because they are used in {@link boundary.BookDetailsForUser} class.
	 * currentBook - saves the details of the book displayed.
	 * filePath - saves the download destination for when the user downloads the table of contents file.
	 */
	private BookCopyController bookCopyController;
	protected Book currentBook;
	protected String filePath;
	@FXML
	protected Label bookTitleLabel;

	@FXML
	protected Label catalogNumberLabel;

	@FXML
	protected Label authorNameLabel;

	@FXML
	protected Label publicationLabel;

	@FXML
	protected Label numberOfCopiesLabel;

	@FXML
	protected Label locationOnShelfLabel;

	@FXML
	protected Label typeLabel;

	@FXML
	protected TextField destTF;

	@FXML
	protected Button downloadFileBtn;

	@FXML
	protected Button dirBrowseBtn;

	@FXML
	protected Button viewFileBtn;

	@FXML
	protected TextArea descriptionTA;

	@FXML
	protected Button closeBtn;

	@FXML
	protected TextArea categoriesTA;

	/**
	 * closes the current window.
	 * @param event auto-generated by SceneBuilder.
	 */
	@FXML
	protected void closeHandler(ActionEvent event) {
		((Stage) closeBtn.getScene().getWindow()).close();
	}

	/**
	 * opens a directory browser for the user to choose a download destination.
	 * @param event auto-generated by SceneBuilder.
	 */
	@FXML
	protected void dirBrowseHandler(ActionEvent event) {
		// change textField style to default.
		destTF.setStyle("-fx-text-fill: black; -fx-border-color: transparent;");
		destTF.setPromptText("Choose download path");
		// open a directory chooser to choose download path
		Stage stage = (Stage) dirBrowseBtn.getScene().getWindow();
		DirectoryChooser chooser = new DirectoryChooser();
		chooser.setTitle("Choose Download Destination");
		File selectedDirectory = chooser.showDialog(stage);
		if (selectedDirectory != null) {
			String dest = selectedDirectory.getAbsolutePath();
			destTF.setText(dest);
		}
		// if user didn't choose, provide feedback and display error message
		if (destTF.getText().isEmpty()) {
			destTF.setStyle("-fx-text-fill: red; -fx-border-color: red;");
			destTF.setText("Please provide download path");
		}
	}
	/**
	 * this method downloads the table of contents file to the destination specified by the user.
	 * If download was successful it displays a button that adds an option to view the file using the users' computer default program for PDF files.
	 * @param event auto-generated by SceneBuilder.
	 */
	@FXML
	protected void downloadFileHandler(ActionEvent event) {
		// change textField style back to default
		destTF.setStyle("-fx-text-fill: black; -fx-border-color: transparent;");
		destTF.setPromptText("Choose download path");
		// check if user didn't choose a destination directory
		if (destTF.getText().isEmpty()) {
			destTF.setStyle("-fx-text-fill: red; -fx-border-color: red;");
			destTF.setText("Please provide download path");
			return;
		}
		// get the byte array from the current book
		byte[] arr = this.currentBook.getTableOfContents().getMybytearray();
		// get the absolute download path
		filePath = destTF.getText() + "\\" + this.currentBook.getTableOfContents().getFileName();
		// create a new file from the byte array and open it in the destination path
		try {
			// create the file using a FileOutputStream
			FileOutputStream fos = new FileOutputStream(filePath);
			fos.write(arr);
			fos.close();// close the resource
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		// set the view file button to visible
		viewFileBtn.setVisible(true);
	}

	/**
	 * view the file using the users' computer default program for PDF files.
	 * using HostServices.
	 * @param event
	 */
	@FXML
	protected void viewFileHandler(ActionEvent event) {
		// open the file
		File file = new File(filePath);
		// view it using host services
		HostServices hostServices = ClientMain.myGetHostServices();
		hostServices.showDocument(file.getAbsolutePath());
	}
	/**
	 * This method is called when the FXML file is loaded, it initialises the variables and some GUI elements.
	 */
	@FXML
	void initialize() {
		bookCopyController = BookCopyController.getInstance(ConstantsAndGlobalVars.ipAddress,
				ConstantsAndGlobalVars.DEFAULT_PORT);
		viewFileBtn.setVisible(false);
	}
	/**
	 * this method is called by the previous window, it loads the details of the book to display to the GUI elements.
	 * @param book - the book to display
	 * @return boolean - return value is not used here, it is used in the subclass.
	 */
	public boolean loadBook(Book book) {
		currentBook = book;
		bookTitleLabel.setText(currentBook.getTitle());
		catalogNumberLabel.setText(currentBook.getCatalogNumber());
		authorNameLabel.setText(currentBook.getAuthorName());
		publicationLabel.setText(currentBook.getPublication());
		numberOfCopiesLabel.setText(
				Integer.toString(bookCopyController.getNumberOfAvailableCopies(currentBook.getCatalogNumber())));
		locationOnShelfLabel.setText(currentBook.getLocationOnShelf());
		typeLabel.setText(currentBook.getType().name());
		descriptionTA.setText(currentBook.getDescription());
		ArrayList<String> categoriesArrayList = this.currentBook.getCategories();
		String text = "";
		for (String string : categoriesArrayList) {
			text = text + string + ",";
		}
		categoriesTA.setText(text);
		return true;
	}
}
