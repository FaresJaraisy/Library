package boundary;

import java.io.IOException;


import control.BookController;
import control.LibrarianController;
import control.MsgController;
import entity.ConstantsAndGlobalVars;
import entity.User;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.paint.Color;
import javafx.stage.Modality;
import javafx.stage.Stage;
/**
 * {@inheritDoc}
 * This class is responsible for controlling the librarian page GUI.
 * It opens different windows responsible for different operation the librarian can do.
 * All GUI elements are {@code protected} because {@link boundary.ManagerPageController} inherits them.
 */
public class LibrarianPageController extends UserPageController {
	/**
	 * instance variables:
	 * msgcontroller - an instance of MsgController to use when getting the messages for the librarian.
	 * 
	 */
	protected LibrarianController librarianController;
	protected BookController bookController;
    private MsgController msgcontroller;
    
	int numberOfMsg;
    @FXML
    protected Button messageButton;
	
	@FXML
	protected Button lendBookBtn;

	@FXML
	protected Button returnBookBtn;
  
    @FXML
	protected Button delayBtn;

	@FXML
	protected Button searchMemberBtn;

	@FXML
	protected Button signupBtn;

	@FXML
	protected Button inventoryBtn;

	/**
	 * opens the "Lend book" window.
	 * @param event - auto-generated by SceneBuilder
	 * @throws IOException - thrown should loading the FXML file encounter any problems.
	 */
    @FXML
    void lendBookHandler(ActionEvent event) throws IOException {
    	Stage primaryStage = new Stage();
		primaryStage.setAlwaysOnTop(true);
		primaryStage.initModality(Modality.APPLICATION_MODAL);
		FXMLLoader loader = new FXMLLoader();
		Parent root = loader.load(getClass().getResource("/boundary/LendGUI.fxml").openStream());
		primaryStage.setScene(new Scene(root));
		primaryStage.setTitle("Lend a book");
		LendBookController lbc = loader.getController();
		lbc.loadUser(userController.getCurrentUser());
		primaryStage.setOnCloseRequest(e-> lbc.closeLendBookWindow());
		primaryStage.show();
    	
    }
	/**
	 * opens the "Inventory Management" window.
	 * @param event - auto-generated by SceneBuilder
	 * @throws IOException - thrown should loading the FXML file encounter any problems.
	 */
	@FXML
	void InventoryManagementHandler(ActionEvent event) throws IOException {
		Stage primaryStage = new Stage();
		FXMLLoader loader = new FXMLLoader();
		Parent root = loader.load(getClass().getResource("/boundary/InventoryManagementGUI.fxml").openStream());
		primaryStage.setScene(new Scene(root));
		primaryStage.setTitle("Inventory Management");
		primaryStage.show();
	}
	/**
	 * opens the "Delay book" window.
	 * @param event - auto-generated by SceneBuilder
	 * @throws IOException - thrown should loading the FXML file encounter any problems.
	 */
	@FXML
	void delayBookHandler(ActionEvent event) throws IOException {
		Stage primaryStage = new Stage();
		primaryStage.setAlwaysOnTop(true);
		primaryStage.initModality(Modality.APPLICATION_MODAL);
		FXMLLoader loader = new FXMLLoader();
		Parent root = loader.load(getClass().getResource("/boundary/DelayManuallyGUI.fxml").openStream());
		primaryStage.setScene(new Scene(root));
		primaryStage.setTitle("Delay Borrow Due Date");
		ManualDelayBorrowController mdbc = loader.getController();
		mdbc.loadUser(userController.getCurrentUser());
		primaryStage.setOnCloseRequest(e-> mdbc.closeManualDelayWindow());
		primaryStage.show();

	}
	/**
	 * opens the "Return book" window.
	 * @param event - auto-generated by SceneBuilder
	 * @throws IOException - thrown should loading the FXML file encounter any problems.
	 */
	@FXML
	void returnBookHandler(ActionEvent event) throws IOException {// func to return a book (call librarian controller)
		
		Stage primaryStage = new Stage();
		primaryStage.setAlwaysOnTop(true);
		primaryStage.initModality(Modality.APPLICATION_MODAL);
		FXMLLoader loader = new FXMLLoader();
		Parent root = loader.load(getClass().getResource("/boundary/ReturnBookGUI.fxml").openStream());
		primaryStage.setScene(new Scene(root));
		primaryStage.setTitle("Return a book");
		ReturnBookController returnBookController = loader.getController();
		primaryStage.setOnCloseRequest(e-> returnBookController.closeReturnBookWindow());
		//returnBookController.loadUser(currentUser);
		primaryStage.show();
		
	}
	/**
	 * opens the "Search member" window.
	 * @param event - auto-generated by SceneBuilder
	 * @throws IOException - thrown should loading the FXML file encounter any problems.
	 */
	@FXML
	void searchMemberHandler(ActionEvent event) throws IOException {
		Stage primaryStage = new Stage();
		primaryStage.setAlwaysOnTop(true);
		primaryStage.initModality(Modality.APPLICATION_MODAL);
		FXMLLoader loader = new FXMLLoader();
		Parent root = loader.load(getClass().getResource("/boundary/SearchMemberGUI.fxml").openStream());
		primaryStage.setScene(new Scene(root));
		primaryStage.setTitle("Search For Member");
		SearchMemberController searchMemberController = loader.getController();
		searchMemberController.loadUser(currentUser);
		primaryStage.show();
	}
	/**
	 * opens the "Create member" window.
	 * @param event - auto-generated by SceneBuilder
	 * @throws IOException - thrown should loading the FXML file encounter any problems.
	 */
	@FXML
	void createMemberHandler(ActionEvent event) throws IOException {

		Stage primaryStage = new Stage();
		primaryStage.setAlwaysOnTop(true);
		primaryStage.initModality(Modality.APPLICATION_MODAL);
		FXMLLoader loader = new FXMLLoader();
		Parent root = loader.load(getClass().getResource("/boundary/CreateMemberGUI.fxml").openStream());
		primaryStage.setScene(new Scene(root));
		primaryStage.setTitle("Create New Member");
		primaryStage.show();
	}
	/**
	 * opens the "messages" window that shows the messages the librarian received.
	 * @param event - auto-generated by SceneBuilder
	 * @throws IOException - thrown should loading the FXML file encounter any problems.
	 */
    @FXML
    void onClickMessageHandler(ActionEvent event) throws IOException {
    	Stage primaryStage = new Stage();
		primaryStage.setAlwaysOnTop(true);
		primaryStage.initModality(Modality.APPLICATION_MODAL);
		FXMLLoader loader = new FXMLLoader();
		Parent root = loader.load(getClass().getResource("/boundary/messages.fxml").openStream());
		Scene scene = new Scene(root);
		scene.getStylesheets().add(getClass().getResource("TableDesign.css").toExternalForm());
		primaryStage.setScene(scene);
		primaryStage.setTitle("**My messages**");
		messagesController mc = loader.getController();
		primaryStage.setOnCloseRequest(e-> mc.close());
		mc.loadUser(currentUser,this);
		primaryStage.show();
    }
    
    /**
     * Gets number of new messages the librarian got using the {@link control.MsgController#getNumberOfMyMessages(String)} method.
     * @param u - the current librarian
     */
    void setNumberOfMessages(User u)
    {
    	numberOfMsg = msgcontroller.getNumberOfMyMessages(u.getUserID());
    	messageButton.setText(Integer.toString(numberOfMsg));
    	messageButton.setTextFill(Color.RED);

    }
	/**
	 * calls the super-class method and initialises instance variables and loads some images. 
	 * @see boundary.UserPageController#initialize()
	 */
	@FXML
	@Override
	void initialize() {
		super.initialize();
		String img = "/pictures/lendHand.png";
		lendBookBtn.setStyle("-fx-background-image: url('" + img + "'); " + "-fx-min-height: 132px; "
				+ "-fx-min-width: 128px;" + "-fx-background-size: 100px 100px;" + "-fx-background-repeat: no-repeat;"
				+ "-fx-background-position: center 8px;" + "-fx-border-color: #0090ff;" + "-fx-border-radious: 5;"
				+ "-fx-border-width: 2;");
		img = "/pictures/return.png";
		returnBookBtn.setStyle("-fx-background-image: url('" + img + "'); " + "-fx-min-height: 132px; "
				+ "-fx-min-width: 128px;" + "-fx-background-size: 100px 100px;" + "-fx-background-repeat: no-repeat;"
				+ "-fx-background-position: center 8px;" + "-fx-border-color: #0090ff;" + "-fx-border-radious: 5;"
				+ "-fx-border-width: 2;");
		img = "/pictures/delay.png";
		delayBtn.setStyle("-fx-background-image: url('" + img + "'); " + "-fx-min-height: 132px; "
				+ "-fx-min-width: 128px;" + "-fx-background-size: 100px 100px;" + "-fx-background-repeat: no-repeat;"
				+ "-fx-background-position: center 8px;" + "-fx-border-color: #0090ff;" + "-fx-border-radious: 5;"
				+ "-fx-border-width: 2;");
		img = "/pictures/searchMember.png";
		searchMemberBtn.setStyle("-fx-background-image: url('" + img + "'); " + "-fx-min-height: 132px; "
				+ "-fx-min-width: 128px;" + "-fx-background-size: 100px 100px;" + "-fx-background-repeat: no-repeat;"
				+ "-fx-background-position: center 8px;" + "-fx-border-color: #0090ff;" + "-fx-border-radious: 5;"
				+ "-fx-border-width: 2;");
		img = "/pictures/Register.png";
		signupBtn.setStyle("-fx-background-image: url('" + img + "'); " + "-fx-min-height: 132px; "
				+ "-fx-min-width: 128px;" + "-fx-background-size: 100px 100px;" + "-fx-background-repeat: no-repeat;"
				+ "-fx-background-position: center 8px;" + "-fx-border-color: #0090ff;" + "-fx-border-radious: 5;"
				+ "-fx-border-width: 2;");
		img = "/pictures/Managment1.png";
		inventoryBtn.setStyle("-fx-background-image: url('" + img + "'); " + "-fx-min-height: 132px; "
				+ "-fx-min-width: 128px;" + "-fx-background-size: 100px 100px;" + "-fx-background-repeat: no-repeat;"
				+ "-fx-background-position: center 8px;" + "-fx-border-color: #0090ff;" + "-fx-border-radious: 5;"
				+ "-fx-border-width: 2;");
		
		img = "/pictures/messageIcon.png";
		messageButton.setStyle("-fx-background-image: url('"+img+"'); "+"-fx-min-height: 50px; "+"-fx-min-width: 70px;" + "-fx-background-size: 20px 20px;"+"-fx-background-repeat: no-repeat;"+"-fx-background-position: center 8px;");

		// System.out.println(super.currentUser);
		/*
		 * do additional functionalities..
		 */
		librarianController = LibrarianController.getInstance(ConstantsAndGlobalVars.ipAddress,
				ConstantsAndGlobalVars.DEFAULT_PORT);
		bookController = BookController.getInstance(ConstantsAndGlobalVars.ipAddress,
				ConstantsAndGlobalVars.DEFAULT_PORT);
		msgcontroller=MsgController.getInstance(ConstantsAndGlobalVars.ipAddress,
				ConstantsAndGlobalVars.DEFAULT_PORT);
	}
	
	
	
}
